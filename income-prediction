#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Dec  4 16:50:55 2018

@author: Michael
"""

# Python version
import sys

print('Python: {}'.format(sys.version))
# scipy
import scipy
print('scipy: {}'.format(scipy.__version__))
# numpy
import numpy
print('numpy: {}'.format(numpy.__version__))
# matplotlib
import matplotlib
print('matplotlib: {}'.format(matplotlib.__version__))
# pandas
import pandas
print('pandas: {}'.format(pandas.__version__))
# scikit-learn
import sklearn
print('sklearn: {}'.format(sklearn.__version__))


# Load libraries
import pandas
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
#from sklearn.svm import SVC
from sklearn import preprocessing



# Load dataset

path_name = "/Users/Michael/Documents/income-predict-ml/adults.csv"
names = ['age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status', 'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss', 'hours-per-week', 'native-country', 'income']
dataset = pandas.read_csv(path_name, names=names)

#shape
print(dataset.shape)

#head
print(dataset.head(20))

#descriptions
print(dataset.describe())

#class distribution
print(dataset.groupby('income').size())

#box and whisker plots
dataset.plot(kind= 'box', subplots = True, layout=(6, 6), sharex = False, sharey = False)
plt.show()

#histogram
dataset.hist()
plt.show()

#scatter plot matrix
scatter_matrix(dataset)
plt.show()

#split out validation dataset
array = dataset.iloc[:, :].values

#preprocess dataset
cols_to_transform = ['workclass', 'education', 'marital-status', 'occupation', 'relationship', 'race', 'sex', 'native-country']

#array[:, 0] = labelencoder_X.fit_transform(array[:, 0])
# Encoding the Dependent Variable

X = array[:, 0:14]
Y = array[:, 14]

labelencoder_X = preprocessing.LabelEncoder()
for i in range(len(names)-1):
    if (isinstance(X[1, i], str)):
        X[:, i] = labelencoder_X.fit_transform(X[:, i])
    X[:, i] = (X[:, i] - float(X[:, i].mean(0))) / (float(X[:, i].max(0)) - float(X[:, i].min(0)))
    print(X[:, i].mean(0))

labelencoder_y = preprocessing.LabelEncoder()
Y = labelencoder_y.fit_transform(Y)

tingX = pandas.DataFrame(X)
tingY = pandas.DataFrame(Y)

validation_size = 0.2
seed = 7
X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X, Y, test_size = validation_size, random_state = seed)

#test options and evaluation metric
seed = 7
scoring = 'accuracy'

#Spot Check Algorithms
models = []
models.append(('LR', LogisticRegression()))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
#models.append(('SVM', SVC()))

#evaluation each model in turn
results = []
names = []
for name, model in models:
    kfold = model_selection.KFold(n_splits=10, random_state=seed)
    cv_results = model_selection.cross_val_score(model, X_train, Y_train, cv=kfold, scoring = scoring)
    results.append(cv_results)
    names.append(name)
    msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
    print(msg)
    
#Compare Algorithms
fig = plt.figure()
fig.suptitle('Algorithm Comparison')
ax = fig.add_subplot(111)
plt.boxplot(results)
ax.set_xticklabels(names)
plt.show()

#Make preditions on a validation dataset
#Final model is KNeighbors Classifier b/c performed best in cv_results
print("LINEAR DISCRIMINANT ANALYSIS")
lda = LinearDiscriminantAnalysis()
lda.fit(X_train, Y_train)
lda_predictions = lda.predict(X_validation)
print("accuracy: %f" % (accuracy_score(Y_validation, lda_predictions)))
print(confusion_matrix(Y_validation, lda_predictions))
print(classification_report(Y_validation, lda_predictions))

print("K-NEIGHBORS CLASSIFIER")
knn = KNeighborsClassifier()
knn.fit(X_train, Y_train)
knn_predictions = knn.predict(X_validation)
print("accuracy: %f" % (accuracy_score(Y_validation, knn_predictions)))
print(confusion_matrix(Y_validation, knn_predictions))
print(classification_report(Y_validation, knn_predictions))

lr = LogisticRegression()
lr.fit(X_train, Y_train)
lr_predictions = lr.predict(X_validation)
print("LOGISTIC REGRESSION")
print("accuracy: %f" % (accuracy_score(Y_validation, lr_predictions)))
print(confusion_matrix(Y_validation, lr_predictions))
print(classification_report(Y_validation, lr_predictions))











































